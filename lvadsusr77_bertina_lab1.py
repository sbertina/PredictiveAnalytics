# -*- coding: utf-8 -*-
"""LVADSUSR77_Bertina_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wU4EMNzQMrPCJe_qhoyjmcY8384otbRW
"""

# importing modules
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import pandas as pd

#reading data
data = pd.read_csv("/content/expenses.csv")
data.head()

# data cleaning
data.isnull().sum()

"""No missing data"""

#Outlier Detection
plt.figure(figsize=(10, 6))
sns.boxplot(data=data[['age', 'bmi', 'children', 'charges']])
plt.title('Outlier Detection')
plt.show()

import warnings as wr
wr.filterwarnings("ignore")

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

#formula
outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)

cleaned_df = data[~outliers]
cleaned_df

plt.figure(figsize=(10, 6))
sns.boxplot(data=cleaned_df[['age', 'bmi', 'children', 'charges']])
plt.title('Boxplot after removing Outliers')
plt.show()

df = pd.get_dummies(cleaned_df, columns=['sex', 'smoker', 'region'], drop_first=True)
df

X = df.drop(columns=['charges'])
y = df['charges']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

age = float(input("Enter the age: "))
bmi = float(input("Enter the BMI: "))
children = int(input("Enter the number of dependants : "))
sex = int(input("Is the insured individual male? (1 for Yes, 0 for No) : "))
smoker = int(input("Are you a smoker? (1 for Yes, 0 for No) : "))
region_southeast = int(input("Are you from Southeast region? (1 for Yes, 0 for No) : "))
region_northwest = int(input("Are you from Northwest region? (1 for Yes, 0 for No) : "))
region_southwest = int(input("Are you from Southwest region? (1 for Yes, 0 for No) : "))
input_data = pd.DataFrame({
    'age': [age],
    'bmi': [bmi],
    'children': [children],
    'sex_male': [sex],
    'smoker_yes': [smoker],
    'region_northwest': [region_northwest],
    'region_southeast': [region_southeast],
    'region_southwest': [region_southwest]
})

predicted_charges = model.predict(input_data)
rounded_val = round(predicted_charges[0],2)
print(f"Predicted Insurance Charges : {rounded_val}")