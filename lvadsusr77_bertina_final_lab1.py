# -*- coding: utf-8 -*-
"""LVADSUSR77_Bertina_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRZZFBO6ygiIYD0wunV_6Rac3Lx4FKjk
"""

#importing necessary modules
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score,classification_report, confusion_matrix, f1_score

file_path = '/content/loan_approval.csv'
data = pd.read_csv(file_path)
data.head()

data.columns

print("Missing values before using ffill: ")
missing_values = data.isnull().sum()
missing_values

"""No missing data found

#Outlier Handling
"""

data.shape

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)

data = data[~outliers]

data.shape

data1 = pd.get_dummies(data, columns=[' education', ' self_employed'])
data1.head()

#Exploratory Data Analysis
print("Shape of the data:", data.shape)
print("Descriptive statistics:\n", data.describe())

#Visualization for the features
for i in data.columns:
    plt.figure()
    sns.histplot(data[i], kde=True)
    plt.title(f'Histogram of {i}')
    plt.xlabel(i)
    plt.ylabel('Frequency')
    plt.show()

X = data1.drop(columns=[' loan_status'])
y = data1[' loan_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train_scaled, y_train)

y_pred = clf.predict(X_test_scaled)

print("Accuracy:", accuracy_score(y_test, y_pred))
print()
print("Classification Report:\n", classification_report(y_test, y_pred))
print()
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))