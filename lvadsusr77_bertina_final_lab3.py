# -*- coding: utf-8 -*-
"""LVADSUSR77_Bertina_lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zd13T0rpGYlx0qq4GkcYB_BhZtlQ0bjT
"""

#Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

#to supress warnings
import warnings as wr
wr.filterwarnings("ignore")

#Reading the Data
file_path = "/content/seeds.csv"
data = pd.read_csv(file_path)
data.head()

data.columns

"""Data Preprocessing"""

print("Missing values before using ffill: ")
missing_values = data.isnull().sum()
missing_values

data.fillna(method='ffill', inplace=True)

print("Missing values after using ffill: ")
missing_values = data.isnull().sum()
missing_values

data.shape

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)

data = data[~outliers]

data.shape

"""Outliers have been removed."""

#Exploratory Data Analysis
print("Shape of the data:", data.shape)
print("Descriptive statistics:\n", data.describe())

plt.figure(figsize=(15, 10))
for i, col in enumerate(data.columns):
    plt.subplot(2, 4, i + 1)
    sns.histplot(data[col], kde=True)
    plt.title(col)
plt.tight_layout()
plt.show()

scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(scaled_data)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

#KMeans model
clf = KMeans(n_clusters=3, init='k-means++', random_state=42)
clf.fit(scaled_data)
data['Cluster'] = clf.labels_

#Model evaluation
silhouette_avg = silhouette_score(scaled_data, kmeans.labels_)
print("Silhouette Score:", silhouette_avg)
sns.pairplot(data=data, hue='Cluster')
plt.show()